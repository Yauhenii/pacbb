window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "core", "modulename": "core", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.bound", "modulename": "core.bound", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.bound.AbstractBound", "modulename": "core.bound.AbstractBound", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.bound.AbstractBound.AbstractBound", "modulename": "core.bound.AbstractBound", "qualname": "AbstractBound", "kind": "class", "doc": "<p>Abstract PAC bound class for evaluating risk certificates.</p>\n\n<p>Args:\n    bound_delta (float): Confidence level over random data samples.\n        It represents the probability that the upper bound of the PAC bound holds.\n    loss_delta (float): Confidence level over random weight samples.\n        It represents the probability that the upper bound of empirical loss holds.</p>\n\n<p>Overall probability is (1 - loss_bound) - bound_delta.</p>\n\n<p>Attributes:\n    _bound_delta (float): Confidence level over random data samples.\n    _loss_delta (float): Confidence level over random weight samples.</p>\n", "bases": "abc.ABC"}, {"fullname": "core.bound.AbstractBound.AbstractBound.calculate", "modulename": "core.bound.AbstractBound", "qualname": "AbstractBound.calculate", "kind": "function", "doc": "<p>Calculates the PAC Bayes bound.</p>\n\n<p>Args:\n    <em>args: Variable length argument list.\n    *</em>kwargs: Arbitrary keyword arguments.</p>\n\n<p>Returns:\n    Tuple[Union[Tensor, float], Union[Tensor, float]]:\n        A tuple containing the calculated PAC bound and the upper bound of empirical risk.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.bound.KLBound", "modulename": "core.bound.KLBound", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.bound.KLBound.KLBound", "modulename": "core.bound.KLBound", "qualname": "KLBound", "kind": "class", "doc": "<p>Implements a PAC Bayes KL bound.</p>\n", "bases": "core.bound.AbstractBound.AbstractBound"}, {"fullname": "core.bound.KLBound.KLBound.__init__", "modulename": "core.bound.KLBound", "qualname": "KLBound.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bound_delta</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">loss_delta</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "core.bound.KLBound.KLBound.calculate", "modulename": "core.bound.KLBound", "qualname": "KLBound.calculate", "kind": "function", "doc": "<p>Calculates the PAC Bayes bound.</p>\n\n<p>Args:\n    avg_loss (float): The loss averaged using Monte Carlo sampling.\n    kl (Union[Tensor, float]): The Kullback-Leibler divergence between prior and posterior distributions.\n    num_samples_bound (int): The number of data samples in the bound dataset.\n    num_samples_loss (int): The number of Monte Carlo samples.</p>\n\n<p>Returns:\n    Tuple[Union[Tensor, float], Union[Tensor, float]]:\n        A tuple containing the calculated PAC Bayes bound and the upper bound of empirical risk.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">avg_loss</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">kl</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">num_samples_bound</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">num_samples_loss</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.bound.McAllesterBound", "modulename": "core.bound.McAllesterBound", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.bound.McAllesterBound.McAllesterBound", "modulename": "core.bound.McAllesterBound", "qualname": "McAllesterBound", "kind": "class", "doc": "<p>Implements a McAllester PAC Bayes bound.</p>\n", "bases": "core.bound.AbstractBound.AbstractBound"}, {"fullname": "core.bound.McAllesterBound.McAllesterBound.__init__", "modulename": "core.bound.McAllesterBound", "qualname": "McAllesterBound.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">bound_delta</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">loss_delta</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "core.bound.McAllesterBound.McAllesterBound.calculate", "modulename": "core.bound.McAllesterBound", "qualname": "McAllesterBound.calculate", "kind": "function", "doc": "<p>Calculates the PAC Bayes bound.</p>\n\n<p>Args:\n    avg_loss (float): The loss averaged using Monte Carlo sampling.\n    kl (Union[Tensor, float]): The Kullback-Leibler divergence between prior and posterior distributions.\n    num_samples_bound (int): The number of data samples in the bound dataset.\n    num_samples_loss (int): The number of Monte Carlo samples.</p>\n\n<p>Returns:\n    Tuple[Union[Tensor, float], Union[Tensor, float]]:\n        A tuple containing the calculated PAC Bayes bound and the upper bound of empirical risk.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">avg_loss</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">kl</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">num_samples_bound</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">num_samples_loss</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.distribution", "modulename": "core.distribution", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.distribution.AbstractVariable", "modulename": "core.distribution.AbstractVariable", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.distribution.AbstractVariable.AbstractVariable", "modulename": "core.distribution.AbstractVariable", "qualname": "AbstractVariable", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"alert note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "torch.nn.modules.module.Module, core.utils.kl.KLDivergenceInterface, abc.ABC"}, {"fullname": "core.distribution.AbstractVariable.AbstractVariable.mu", "modulename": "core.distribution.AbstractVariable", "qualname": "AbstractVariable.mu", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "core.distribution.AbstractVariable.AbstractVariable.rho", "modulename": "core.distribution.AbstractVariable", "qualname": "AbstractVariable.rho", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "core.distribution.AbstractVariable.AbstractVariable.kl_div", "modulename": "core.distribution.AbstractVariable", "qualname": "AbstractVariable.kl_div", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "core.distribution.AbstractVariable.AbstractVariable.sigma", "modulename": "core.distribution.AbstractVariable", "qualname": "AbstractVariable.sigma", "kind": "variable", "doc": "<p></p>\n", "annotation": ": torch.Tensor"}, {"fullname": "core.distribution.AbstractVariable.AbstractVariable.sample", "modulename": "core.distribution.AbstractVariable", "qualname": "AbstractVariable.sample", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.distribution.AbstractVariable.AbstractVariable.compute_kl", "modulename": "core.distribution.AbstractVariable", "qualname": "AbstractVariable.compute_kl", "kind": "function", "doc": "<p>Computes the Kullback-Leibler Divergence (KL Divergence) between two probability distributions.</p>\n\n<p>Args:\n    <em>args: Variable length argument list.\n    *</em>kwargs: Arbitrary keyword arguments.</p>\n\n<p>Returns:\n    torch.Tensor: The computed KL Divergence.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.distribution.GaussianVariable", "modulename": "core.distribution.GaussianVariable", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.distribution.GaussianVariable.GaussianVariable", "modulename": "core.distribution.GaussianVariable", "qualname": "GaussianVariable", "kind": "class", "doc": "<p>Represents a Gaussian random variable with mean mu and TODO rho.</p>\n", "bases": "core.distribution.AbstractVariable.AbstractVariable"}, {"fullname": "core.distribution.GaussianVariable.GaussianVariable.__init__", "modulename": "core.distribution.GaussianVariable", "qualname": "GaussianVariable.__init__", "kind": "function", "doc": "<p>Initialize the GaussianVariable.</p>\n\n<p>Args:\n    mu (Tensor): The mean of the Gaussian distribution.\n    rho (Tensor): TODO of the Gaussian distribution.\n    mu_requires_grad (bool): Flag indicating whether mu is fixed.\n    rho_requires_grad (bool): Flag indicating whether rho is fixed.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mu</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">rho</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">mu_requires_grad</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">rho_requires_grad</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "core.distribution.GaussianVariable.GaussianVariable.sample", "modulename": "core.distribution.GaussianVariable", "qualname": "GaussianVariable.sample", "kind": "function", "doc": "<p>Sample from the Gaussian distribution.</p>\n\n<p>Returns:\n    Tensor: Sampled values from the Gaussian distribution.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.distribution.GaussianVariable.GaussianVariable.compute_kl", "modulename": "core.distribution.GaussianVariable", "qualname": "GaussianVariable.compute_kl", "kind": "function", "doc": "<p>Compute the KL divergence between two Gaussian distributions.</p>\n\n<p>Args:\n    other (GaussianVariable): The other Gaussian distribution.</p>\n\n<p>Returns:\n    Tensor: The KL divergence between the two distributions.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">GaussianVariable</span><span class=\"o\">.</span><span class=\"n\">GaussianVariable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.distribution.LaplaceVariable", "modulename": "core.distribution.LaplaceVariable", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.distribution.LaplaceVariable.LaplaceVariable", "modulename": "core.distribution.LaplaceVariable", "qualname": "LaplaceVariable", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"alert note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "core.distribution.AbstractVariable.AbstractVariable"}, {"fullname": "core.distribution.LaplaceVariable.LaplaceVariable.__init__", "modulename": "core.distribution.LaplaceVariable", "qualname": "LaplaceVariable.__init__", "kind": "function", "doc": "<p>Initialize the LaplaceVariable.</p>\n\n<p>Args:\n    mu (Tensor): The mean of the Laplace distribution.\n    rho (Tensor): TODO of the Laplace distribution.\n    mu_requires_grad (bool): Flag indicating whether mu is fixed.\n    rho_requires_grad (bool): Flag indicating whether rho is fixed.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mu</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">rho</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">mu_requires_grad</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">rho_requires_grad</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "core.distribution.LaplaceVariable.LaplaceVariable.sample", "modulename": "core.distribution.LaplaceVariable", "qualname": "LaplaceVariable.sample", "kind": "function", "doc": "<p>Sample from the Laplace distribution.</p>\n\n<p>Returns:\n    Tensor: Sampled values from the Laplace distribution.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "core.distribution.LaplaceVariable.LaplaceVariable.compute_kl", "modulename": "core.distribution.LaplaceVariable", "qualname": "LaplaceVariable.compute_kl", "kind": "function", "doc": "<p>Compute the KL divergence between two Laplace distributions.</p>\n\n<p>Args:\n    other (LaplaceVariable): The other Laplace distribution.</p>\n\n<p>Returns:\n    Tensor: The KL divergence between the two distributions.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">LaplaceVariable</span><span class=\"o\">.</span><span class=\"n\">LaplaceVariable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.distribution.utils", "modulename": "core.distribution.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.distribution.utils.DistributionT", "modulename": "core.distribution.utils", "qualname": "DistributionT", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Dict[typing.Tuple[str, ...], typing.Dict[str, core.distribution.AbstractVariable.AbstractVariable]]"}, {"fullname": "core.distribution.utils.from_ivon", "modulename": "core.distribution.utils", "qualname": "from_ivon", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span>,</span><span class=\"param\">\t<span class=\"n\">optimizer</span><span class=\"p\">:</span> <span class=\"n\">ivon</span><span class=\"o\">.</span><span class=\"n\">_ivon</span><span class=\"o\">.</span><span class=\"n\">IVON</span>,</span><span class=\"param\">\t<span class=\"n\">distribution</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">requires_grad</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">get_layers_func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">],</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">get_torch_layers</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.distribution.utils.from_flat_rho", "modulename": "core.distribution.utils", "qualname": "from_flat_rho", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span>,</span><span class=\"param\">\t<span class=\"n\">rho</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">distribution</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">requires_grad</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">get_layers_func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">],</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">get_torch_layers</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.distribution.utils.from_random", "modulename": "core.distribution.utils", "qualname": "from_random", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span>,</span><span class=\"param\">\t<span class=\"n\">rho</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">distribution</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">requires_grad</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">get_layers_func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">],</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">get_torch_layers</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.distribution.utils.from_zeros", "modulename": "core.distribution.utils", "qualname": "from_zeros", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span>,</span><span class=\"param\">\t<span class=\"n\">rho</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">distribution</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">requires_grad</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">get_layers_func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">],</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">get_torch_layers</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.distribution.utils.from_layered", "modulename": "core.distribution.utils", "qualname": "from_layered", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span>,</span><span class=\"param\">\t<span class=\"n\">attribute_mapping</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">distribution</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">requires_grad</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">get_layers_func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">],</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">get_torch_layers</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.distribution.utils.from_bnn", "modulename": "core.distribution.utils", "qualname": "from_bnn", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span>,</span><span class=\"param\">\t<span class=\"n\">distribution</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">requires_grad</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">get_layers_func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">],</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">get_bayesian_torch_layers</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.distribution.utils.from_copy", "modulename": "core.distribution.utils", "qualname": "from_copy", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dist</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">distribution</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">requires_grad</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.distribution.utils.compute_kl", "modulename": "core.distribution.utils", "qualname": "compute_kl", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dist1</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">dist2</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.distribution.utils.compute_standard_normal_cdf", "modulename": "core.distribution.utils", "qualname": "compute_standard_normal_cdf", "kind": "function", "doc": "<p>Compute the standard normal cumulative distribution function.</p>\n\n<p>Parameters:\nx (float): The input value.</p>\n\n<p>Returns:\nfloat: The cumulative distribution function value at x.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.distribution.utils.truncated_normal_fill_tensor", "modulename": "core.distribution.utils", "qualname": "truncated_normal_fill_tensor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">tensor</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">mean</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">std</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">2.0</span>,</span><span class=\"param\">\t<span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">2.0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.layer", "modulename": "core.layer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.layer.AbstractProbLayer", "modulename": "core.layer.AbstractProbLayer", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.layer.AbstractProbLayer.AbstractProbLayer", "modulename": "core.layer.AbstractProbLayer", "qualname": "AbstractProbLayer", "kind": "class", "doc": "<p>Base class for all neural network modules.</p>\n\n<p>Your models should also subclass this class.</p>\n\n<p>Modules can also contain other Modules, allowing to nest them in\na tree structure. You can assign the submodules as regular attributes::</p>\n\n<pre><code>import torch.nn as nn\nimport torch.nn.functional as F\n\nclass Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 20, 5)\n        self.conv2 = nn.Conv2d(20, 20, 5)\n\n    def forward(self, x):\n        x = F.relu(self.conv1(x))\n        return F.relu(self.conv2(x))\n</code></pre>\n\n<p>Submodules assigned in this way will be registered, and will have their\nparameters converted too when you call <code>to()</code>, etc.</p>\n\n<div class=\"alert note\">\n\n<p>As per the example above, an <code>__init__()</code> call to the parent class\nmust be made before assignment on the child.</p>\n\n</div>\n\n<p>:ivar training: Boolean represents whether this module is in training or\n                evaluation mode.\n:vartype training: bool</p>\n", "bases": "torch.nn.modules.module.Module, abc.ABC"}, {"fullname": "core.layer.AbstractProbLayer.AbstractProbLayer.probabilistic_mode", "modulename": "core.layer.AbstractProbLayer", "qualname": "AbstractProbLayer.probabilistic_mode", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "core.layer.AbstractProbLayer.AbstractProbLayer.probabilistic", "modulename": "core.layer.AbstractProbLayer", "qualname": "AbstractProbLayer.probabilistic", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "core.layer.AbstractProbLayer.AbstractProbLayer.sample_from_distribution", "modulename": "core.layer.AbstractProbLayer", "qualname": "AbstractProbLayer.sample_from_distribution", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">,</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.layer.ProbBatchNorm1d", "modulename": "core.layer.ProbBatchNorm1d", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.layer.ProbBatchNorm1d.ProbBatchNorm1d", "modulename": "core.layer.ProbBatchNorm1d", "qualname": "ProbBatchNorm1d", "kind": "class", "doc": "<p>Applies Batch Normalization over a 2D or 3D input as described in the paper\n<a href=\"https://arxiv.org/abs/1502.03167\">Batch Normalization: Accelerating Deep Network Training by Reducing\nInternal Covariate Shift </a>_ .</p>\n\n<p>$$y = \\frac{x - \\mathrm{E}[x]}{\\sqrt{\\mathrm{Var}[x] + \\epsilon}} * \\gamma + \\beta$$</p>\n\n<p>The mean and standard-deviation are calculated per-dimension over\nthe mini-batches and \\( \\gamma \\) and \\( \\beta \\) are learnable parameter vectors\nof size <code>C</code> (where <code>C</code> is the number of features or channels of the input). By default, the\nelements of \\( \\gamma \\) are set to 1 and the elements of \\( \\beta \\) are set to 0.\nAt train time in the forward pass, the standard-deviation is calculated via the biased estimator,\nequivalent to <code>torch.var(input, unbiased=False)</code>. However, the value stored in the\nmoving average of the standard-deviation is calculated via the unbiased  estimator, equivalent to\n<code>torch.var(input, unbiased=True)</code>.</p>\n\n<p>Also by default, during training this layer keeps running estimates of its\ncomputed mean and variance, which are then used for normalization during\nevaluation. The running estimates are kept with a default <code>momentum</code>\nof 0.1.</p>\n\n<p>If <code>track_running_stats</code> is set to <code>False</code>, this layer then does not\nkeep running estimates, and batch statistics are instead used during\nevaluation time as well.</p>\n\n<div class=\"alert note\">\n\n<p>This <code>momentum</code> argument is different from one used in optimizer\nclasses and the conventional notion of momentum. Mathematically, the\nupdate rule for running statistics here is\n\\( \\hat{x}_\\text{new} = (1 - \\text{momentum}) \\times \\hat{x} + \\text{momentum} \\times x_t \\),\nwhere \\( \\hat{x} \\) is the estimated statistic and \\( x_t \\) is the\nnew observed value.</p>\n\n</div>\n\n<p>Because the Batch Normalization is done over the <code>C</code> dimension, computing statistics\non <code>(N, L)</code> slices, it's common terminology to call this Temporal Batch Normalization.</p>\n\n<p>Args:\n    num_features: number of features or channels \\( C \\) of the input\n    eps: a value added to the denominator for numerical stability.\n        Default: 1e-5\n    momentum: the value used for the running_mean and running_var\n        computation. Can be set to <code>None</code> for cumulative moving average\n        (i.e. simple average). Default: 0.1\n    affine: a boolean value that when set to <code>True</code>, this module has\n        learnable affine parameters. Default: <code>True</code>\n    track_running_stats: a boolean value that when set to <code>True</code>, this\n        module tracks the running mean and variance, and when set to <code>False</code>,\n        this module does not track such statistics, and initializes statistics\n        buffers <code>running_mean</code> and <code>running_var</code> as <code>None</code>.\n        When these buffers are <code>None</code>, this module always uses batch statistics.\n        in both training and eval modes. Default: <code>True</code></p>\n\n<p>Shape:\n    - Input: \\( (N, C) \\) or \\( (N, C, L) \\), where \\( N \\) is the batch size,\n      \\( C \\) is the number of features or channels, and \\( L \\) is the sequence length\n    - Output: \\( (N, C) \\) or \\( (N, C, L) \\) (same shape as input)</p>\n\n<p>Examples::</p>\n\n<pre><code>&gt;&gt;&gt; # With Learnable Parameters\n&gt;&gt;&gt; m = nn.BatchNorm1d(100)\n&gt;&gt;&gt; # Without Learnable Parameters\n&gt;&gt;&gt; m = nn.BatchNorm1d(100, affine=False)\n&gt;&gt;&gt; input = torch.randn(20, 100)\n&gt;&gt;&gt; output = m(input)\n</code></pre>\n", "bases": "torch.nn.modules.batchnorm.BatchNorm1d, core.layer.AbstractProbLayer.AbstractProbLayer"}, {"fullname": "core.layer.ProbBatchNorm1d.ProbBatchNorm1d.forward", "modulename": "core.layer.ProbBatchNorm1d", "qualname": "ProbBatchNorm1d.forward", "kind": "function", "doc": "<p>Define the computation performed at every call.</p>\n\n<p>Should be overridden by all subclasses.</p>\n\n<div class=\"alert note\">\n\n<p>Although the recipe for forward pass needs to be defined within\nthis function, one should call the <code>Module</code> instance afterwards\ninstead of this since the former takes care of running the\nregistered hooks while the latter silently ignores them.</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.layer.ProbBatchNorm2d", "modulename": "core.layer.ProbBatchNorm2d", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.layer.ProbBatchNorm2d.ProbBatchNorm2d", "modulename": "core.layer.ProbBatchNorm2d", "qualname": "ProbBatchNorm2d", "kind": "class", "doc": "<p>Applies Batch Normalization over a 4D input (a mini-batch of 2D inputs\nwith additional channel dimension) as described in the paper\n<a href=\"https://arxiv.org/abs/1502.03167\">Batch Normalization: Accelerating Deep Network Training by Reducing\nInternal Covariate Shift </a>_ .</p>\n\n<p>$$y = \\frac{x - \\mathrm{E}[x]}{ \\sqrt{\\mathrm{Var}[x] + \\epsilon}} * \\gamma + \\beta$$</p>\n\n<p>The mean and standard-deviation are calculated per-dimension over\nthe mini-batches and \\( \\gamma \\) and \\( \\beta \\) are learnable parameter vectors\nof size <code>C</code> (where <code>C</code> is the input size). By default, the elements of \\( \\gamma \\) are set\nto 1 and the elements of \\( \\beta \\) are set to 0. At train time in the forward pass, the\nstandard-deviation is calculated via the biased estimator, equivalent to\n<code>torch.var(input, unbiased=False)</code>. However, the value stored in the moving average of the\nstandard-deviation is calculated via the unbiased  estimator, equivalent to\n<code>torch.var(input, unbiased=True)</code>.</p>\n\n<p>Also by default, during training this layer keeps running estimates of its\ncomputed mean and variance, which are then used for normalization during\nevaluation. The running estimates are kept with a default <code>momentum</code>\nof 0.1.</p>\n\n<p>If <code>track_running_stats</code> is set to <code>False</code>, this layer then does not\nkeep running estimates, and batch statistics are instead used during\nevaluation time as well.</p>\n\n<div class=\"alert note\">\n\n<p>This <code>momentum</code> argument is different from one used in optimizer\nclasses and the conventional notion of momentum. Mathematically, the\nupdate rule for running statistics here is\n\\( \\hat{x}_\\text{new} = (1 - \\text{momentum}) \\times \\hat{x} + \\text{momentum} \\times x_t \\),\nwhere \\( \\hat{x} \\) is the estimated statistic and \\( x_t \\) is the\nnew observed value.</p>\n\n</div>\n\n<p>Because the Batch Normalization is done over the <code>C</code> dimension, computing statistics\non <code>(N, H, W)</code> slices, it's common terminology to call this Spatial Batch Normalization.</p>\n\n<p>Args:\n    num_features: \\( C \\) from an expected input of size\n        \\( (N, C, H, W) \\)\n    eps: a value added to the denominator for numerical stability.\n        Default: 1e-5\n    momentum: the value used for the running_mean and running_var\n        computation. Can be set to <code>None</code> for cumulative moving average\n        (i.e. simple average). Default: 0.1\n    affine: a boolean value that when set to <code>True</code>, this module has\n        learnable affine parameters. Default: <code>True</code>\n    track_running_stats: a boolean value that when set to <code>True</code>, this\n        module tracks the running mean and variance, and when set to <code>False</code>,\n        this module does not track such statistics, and initializes statistics\n        buffers <code>running_mean</code> and <code>running_var</code> as <code>None</code>.\n        When these buffers are <code>None</code>, this module always uses batch statistics.\n        in both training and eval modes. Default: <code>True</code></p>\n\n<p>Shape:\n    - Input: \\( (N, C, H, W) \\)\n    - Output: \\( (N, C, H, W) \\) (same shape as input)</p>\n\n<p>Examples::</p>\n\n<pre><code>&gt;&gt;&gt; # With Learnable Parameters\n&gt;&gt;&gt; m = nn.BatchNorm2d(100)\n&gt;&gt;&gt; # Without Learnable Parameters\n&gt;&gt;&gt; m = nn.BatchNorm2d(100, affine=False)\n&gt;&gt;&gt; input = torch.randn(20, 100, 35, 45)\n&gt;&gt;&gt; output = m(input)\n</code></pre>\n", "bases": "torch.nn.modules.batchnorm.BatchNorm2d, core.layer.AbstractProbLayer.AbstractProbLayer"}, {"fullname": "core.layer.ProbBatchNorm2d.ProbBatchNorm2d.forward", "modulename": "core.layer.ProbBatchNorm2d", "qualname": "ProbBatchNorm2d.forward", "kind": "function", "doc": "<p>Define the computation performed at every call.</p>\n\n<p>Should be overridden by all subclasses.</p>\n\n<div class=\"alert note\">\n\n<p>Although the recipe for forward pass needs to be defined within\nthis function, one should call the <code>Module</code> instance afterwards\ninstead of this since the former takes care of running the\nregistered hooks while the latter silently ignores them.</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.layer.ProbConv2d", "modulename": "core.layer.ProbConv2d", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.layer.ProbConv2d.ProbConv2d", "modulename": "core.layer.ProbConv2d", "qualname": "ProbConv2d", "kind": "class", "doc": "<p>Applies a 2D convolution over an input signal composed of several input\nplanes.</p>\n\n<p>In the simplest case, the output value of the layer with input size\n\\( (N, C_{\\text{in}}, H, W) \\) and output \\( (N, C_{\\text{out}}, H_{\\text{out}}, W_{\\text{out}}) \\)\ncan be precisely described as:</p>\n\n<p>$$\\text{out}(N_i, C_{\\text{out}_j}) = \\text{bias}(C_{\\text{out}_j}) +\n\\sum_{k = 0}^{C_{\\text{in}} - 1} \\text{weight}(C_{\\text{out}_j}, k) \\star \\text{input}(N_i, k)$$</p>\n\n<p>where \\( \\star \\) is the valid 2D <a href=\"https://en.wikipedia.org/wiki/Cross-correlation\">cross-correlation</a> operator,\n\\( N \\) is a batch size, \\( C \\) denotes a number of channels,\n\\( H \\) is a height of input planes in pixels, and \\( W \\) is\nwidth in pixels.</p>\n\n<p>This module supports :ref:<code>TensorFloat32&lt;tf32_on_ampere&gt;</code>.</p>\n\n<p>On certain ROCm devices, when using float16 inputs this module will use :ref:<code>different precision&lt;fp16_on_mi200&gt;</code> for backward.</p>\n\n<ul>\n<li><p><code>stride</code> controls the stride for the cross-correlation, a single\nnumber or a tuple.</p></li>\n<li><p><code>padding</code> controls the amount of padding applied to the input. It\ncan be either a string {'valid', 'same'} or an int / a tuple of ints giving the\namount of implicit padding applied on both sides.</p></li>\n<li><p><code>dilation</code> controls the spacing between the kernel points; also\nknown as the \u00e0 trous algorithm. It is harder to describe, but this <a href=\"https://github.com/vdumoulin/conv_arithmetic/blob/master/README.md\">link</a>\nhas a nice visualization of what <code>dilation</code> does.</p></li>\n<li><p><code>groups</code> controls the connections between inputs and outputs.\n<code>in_channels</code> and <code>out_channels</code> must both be divisible by\n<code>groups</code>. For example,</p>\n\n<ul>\n<li>At groups=1, all inputs are convolved to all outputs.</li>\n<li>At groups=2, the operation becomes equivalent to having two conv\nlayers side by side, each seeing half the input channels\nand producing half the output channels, and both subsequently\nconcatenated.</li>\n<li>At groups= <code>in_channels</code>, each input channel is convolved with\nits own set of filters (of size\n\\( \\frac{\\text{out_channels}}{\\text{in_channels}} \\)).</li>\n</ul></li>\n</ul>\n\n<p>The parameters <code>kernel_size</code>, <code>stride</code>, <code>padding</code>, <code>dilation</code> can either be:</p>\n\n<pre><code>- a single ``int`` -- in which case the same value is used for the height and width dimension\n- a ``tuple`` of two ints -- in which case, the first `int` is used for the height dimension,\n  and the second `int` for the width dimension\n</code></pre>\n\n<p>Note:\n    When <code>groups == in_channels</code> and <code>out_channels == K * in_channels</code>,\n    where <code>K</code> is a positive integer, this operation is also known as a \"depthwise convolution\".</p>\n\n<pre><code>In other words, for an input of size \\\\( (N, C_{in}, L_{in}) \\\\),\na depthwise convolution with a depthwise multiplier `K` can be performed with the arguments\n\\\\( (C_\\text{in}=C_\\text{in}, C_\\text{out}=C_\\text{in} \\times \\text{K}, ..., \\text{groups}=C_\\text{in}) \\\\).\n</code></pre>\n\n<p>Note:\n    In some circumstances when given tensors on a CUDA device and using CuDNN, this operator may select a nondeterministic algorithm to increase performance. If this is undesirable, you can try to make the operation deterministic (potentially at a performance cost) by setting <code>torch.backends.cudnn.deterministic = True</code>. See :doc:<code>/notes/randomness</code> for more information.</p>\n\n<p>Note:\n    <code>padding='valid'</code> is the same as no padding. <code>padding='same'</code> pads\n    the input so the output has the shape as the input. However, this mode\n    doesn't support any stride values other than 1.</p>\n\n<p>Note:\n    This module supports complex data types i.e. <code>complex32, complex64, complex128</code>.</p>\n\n<p>Args:\n    in_channels (int): Number of channels in the input image\n    out_channels (int): Number of channels produced by the convolution\n    kernel_size (int or tuple): Size of the convolving kernel\n    stride (int or tuple, optional): Stride of the convolution. Default: 1\n    padding (int, tuple or str, optional): Padding added to all four sides of\n        the input. Default: 0\n    padding_mode (str, optional): <code>'zeros'</code>, <code>'reflect'</code>,\n        <code>'replicate'</code> or <code>'circular'</code>. Default: <code>'zeros'</code>\n    dilation (int or tuple, optional): Spacing between kernel elements. Default: 1\n    groups (int, optional): Number of blocked connections from input\n        channels to output channels. Default: 1\n    bias (bool, optional): If <code>True</code>, adds a learnable bias to the\n        output. Default: <code>True</code></p>\n\n<p>Shape:\n    - Input: \\( (N, C_{in}, H_{in}, W_{in}) \\) or \\( (C_{in}, H_{in}, W_{in}) \\)\n    - Output: \\( (N, C_{out}, H_{out}, W_{out}) \\) or \\( (C_{out}, H_{out}, W_{out}) \\), where</p>\n\n<pre><code>  $$H_{out} = \\left\\lfloor\\frac{H_{in}  + 2 \\times \\text{padding}[0] - \\text{dilation}[0]\n      \\times (\\text{kernel\\_size}[0] - 1) - 1}{\\text{stride}[0]} + 1\\right\\rfloor$$\n\n  $$W_{out} = \\left\\lfloor\\frac{W_{in}  + 2 \\times \\text{padding}[1] - \\text{dilation}[1]\n      \\times (\\text{kernel\\_size}[1] - 1) - 1}{\\text{stride}[1]} + 1\\right\\rfloor$$\n</code></pre>\n\n<p>Attributes:\n    weight (Tensor): the learnable weights of the module of shape\n        \\( (\\text{out_channels}, \\frac{\\text{in_channels}}{\\text{groups}}, \\)\n        \\( \\text{kernel_size[0]}, \\text{kernel_size[1]}) \\).\n        The values of these weights are sampled from\n        \\( \\mathcal{U}(-\\sqrt{k}, \\sqrt{k}) \\) where\n        \\( k = \\frac{groups}{C_\\text{in} * \\prod_{i=0}^{1}\\text{kernel_size}[i]} \\)\n    bias (Tensor):   the learnable bias of the module of shape\n        (out_channels). If <code>bias</code> is <code>True</code>,\n        then the values of these weights are\n        sampled from \\( \\mathcal{U}(-\\sqrt{k}, \\sqrt{k}) \\) where\n        \\( k = \\frac{groups}{C_\\text{in} * \\prod_{i=0}^{1}\\text{kernel_size}[i]} \\)</p>\n\n<p>Examples:</p>\n\n<pre><code>&gt;&gt;&gt; # With square kernels and equal stride\n&gt;&gt;&gt; m = nn.Conv2d(16, 33, 3, stride=2)\n&gt;&gt;&gt; # non-square kernels and unequal stride and with padding\n&gt;&gt;&gt; m = nn.Conv2d(16, 33, (3, 5), stride=(2, 1), padding=(4, 2))\n&gt;&gt;&gt; # non-square kernels and unequal stride and with padding and dilation\n&gt;&gt;&gt; m = nn.Conv2d(16, 33, (3, 5), stride=(2, 1), padding=(4, 2), dilation=(3, 1))\n&gt;&gt;&gt; input = torch.randn(20, 16, 50, 100)\n&gt;&gt;&gt; output = m(input)\n</code></pre>\n", "bases": "torch.nn.modules.conv.Conv2d, core.layer.AbstractProbLayer.AbstractProbLayer"}, {"fullname": "core.layer.ProbConv2d.ProbConv2d.forward", "modulename": "core.layer.ProbConv2d", "qualname": "ProbConv2d.forward", "kind": "function", "doc": "<p>Define the computation performed at every call.</p>\n\n<p>Should be overridden by all subclasses.</p>\n\n<div class=\"alert note\">\n\n<p>Although the recipe for forward pass needs to be defined within\nthis function, one should call the <code>Module</code> instance afterwards\ninstead of this since the former takes care of running the\nregistered hooks while the latter silently ignores them.</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.layer.ProbLinear", "modulename": "core.layer.ProbLinear", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.layer.ProbLinear.ProbLinear", "modulename": "core.layer.ProbLinear", "qualname": "ProbLinear", "kind": "class", "doc": "<p>Applies a linear transformation to the incoming data: \\( y = xA^T + b \\).</p>\n\n<p>This module supports :ref:<code>TensorFloat32&lt;tf32_on_ampere&gt;</code>.</p>\n\n<p>On certain ROCm devices, when using float16 inputs this module will use :ref:<code>different precision&lt;fp16_on_mi200&gt;</code> for backward.</p>\n\n<p>Args:\n    in_features: size of each input sample\n    out_features: size of each output sample\n    bias: If set to <code>False</code>, the layer will not learn an additive bias.\n        Default: <code>True</code></p>\n\n<p>Shape:\n    - Input: \\( (<em>, H_{in}) \\) where \\( * \\) means any number of\n      dimensions including none and \\( H_{in} = \\text{in_features} \\).\n    - Output: \\( (</em>, H_{out}) \\) where all but the last dimension\n      are the same shape as the input and \\( H_{out} = \\text{out_features} \\).</p>\n\n<p>Attributes:\n    weight: the learnable weights of the module of shape\n        \\( (\\text{out_features}, \\text{in_features}) \\). The values are\n        initialized from \\( \\mathcal{U}(-\\sqrt{k}, \\sqrt{k}) \\), where\n        \\( k = \\frac{1}{\\text{in_features}} \\)\n    bias:   the learnable bias of the module of shape \\( (\\text{out_features}) \\).\n            If <code>bias</code> is <code>True</code>, the values are initialized from\n            \\( \\mathcal{U}(-\\sqrt{k}, \\sqrt{k}) \\) where\n            \\( k = \\frac{1}{\\text{in_features}} \\)</p>\n\n<p>Examples::</p>\n\n<pre><code>&gt;&gt;&gt; m = nn.Linear(20, 30)\n&gt;&gt;&gt; input = torch.randn(128, 20)\n&gt;&gt;&gt; output = m(input)\n&gt;&gt;&gt; print(output.size())\ntorch.Size([128, 30])\n</code></pre>\n", "bases": "torch.nn.modules.linear.Linear, core.layer.AbstractProbLayer.AbstractProbLayer"}, {"fullname": "core.layer.ProbLinear.ProbLinear.forward", "modulename": "core.layer.ProbLinear", "qualname": "ProbLinear.forward", "kind": "function", "doc": "<p>Define the computation performed at every call.</p>\n\n<p>Should be overridden by all subclasses.</p>\n\n<div class=\"alert note\">\n\n<p>Although the recipe for forward pass needs to be defined within\nthis function, one should call the <code>Module</code> instance afterwards\ninstead of this since the former takes care of running the\nregistered hooks while the latter silently ignores them.</p>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">input</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.layer.supported_layers", "modulename": "core.layer.supported_layers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.layer.supported_layers.LAYER_MAPPING", "modulename": "core.layer.supported_layers", "qualname": "LAYER_MAPPING", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&lt;class &#x27;torch.nn.modules.linear.Linear&#x27;&gt;: &lt;class &#x27;core.layer.ProbLinear.ProbLinear&#x27;&gt;, &lt;class &#x27;torch.nn.modules.conv.Conv2d&#x27;&gt;: &lt;class &#x27;core.layer.ProbConv2d.ProbConv2d&#x27;&gt;, &lt;class &#x27;torch.nn.modules.batchnorm.BatchNorm1d&#x27;&gt;: &lt;class &#x27;core.layer.ProbBatchNorm1d.ProbBatchNorm1d&#x27;&gt;, &lt;class &#x27;torch.nn.modules.batchnorm.BatchNorm2d&#x27;&gt;: &lt;class &#x27;core.layer.ProbBatchNorm2d.ProbBatchNorm2d&#x27;&gt;}"}, {"fullname": "core.layer.utils", "modulename": "core.layer.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.layer.utils.LayerNameT", "modulename": "core.layer.utils", "qualname": "LayerNameT", "kind": "variable", "doc": "<p></p>\n", "default_value": "typing.Tuple[str, ...]"}, {"fullname": "core.layer.utils.get_layers", "modulename": "core.layer.utils", "qualname": "get_layers", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span>,</span><span class=\"param\">\t<span class=\"n\">is_layer_func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.layer.utils.is_torch_layer", "modulename": "core.layer.utils", "qualname": "is_torch_layer", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">layer</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.layer.utils.get_torch_layers", "modulename": "core.layer.utils", "qualname": "get_torch_layers", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.layer.utils.is_bayesian_torch_layer", "modulename": "core.layer.utils", "qualname": "is_bayesian_torch_layer", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">layer</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.layer.utils.get_bayesian_torch_layers", "modulename": "core.layer.utils", "qualname": "get_bayesian_torch_layers", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.loss", "modulename": "core.loss", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.loss.rescale_loss", "modulename": "core.loss", "qualname": "rescale_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">loss</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">pmin</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.loss.nll_loss", "modulename": "core.loss", "qualname": "nll_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">outputs</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">targets</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">pmin</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.loss.scaled_nll_loss", "modulename": "core.loss", "qualname": "scaled_nll_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">outputs</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">targets</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">pmin</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.loss.zero_one_loss", "modulename": "core.loss", "qualname": "zero_one_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">outputs</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">targets</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">pmin</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.loss.compute_losses", "modulename": "core.loss", "qualname": "compute_losses", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span>,</span><span class=\"param\">\t<span class=\"n\">bound_loader</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">dataloader</span><span class=\"o\">.</span><span class=\"n\">DataLoader</span>,</span><span class=\"param\">\t<span class=\"n\">mc_samples</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">loss_func_list</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">device</span>,</span><span class=\"param\">\t<span class=\"n\">pmin</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.metric", "modulename": "core.metric", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.metric.evaluate_metrics", "modulename": "core.metric", "qualname": "evaluate_metrics", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span>,</span><span class=\"param\">\t<span class=\"n\">metrics</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">test_loader</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">dataloader</span><span class=\"o\">.</span><span class=\"n\">DataLoader</span>,</span><span class=\"param\">\t<span class=\"n\">num_samples_metric</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">device</span>,</span><span class=\"param\">\t<span class=\"n\">pmin</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-05</span>,</span><span class=\"param\">\t<span class=\"n\">wandb_params</span><span class=\"p\">:</span> <span class=\"n\">Dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.model", "modulename": "core.model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.model.bounded_call", "modulename": "core.model", "qualname": "bounded_call", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">pmin</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.model.dnn_to_probnn", "modulename": "core.model", "qualname": "dnn_to_probnn", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span>,</span><span class=\"param\">\t<span class=\"n\">weight_dist</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">prior_weight_dist</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">get_layers_func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">],</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">get_torch_layers</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "core.model.update_dist", "modulename": "core.model", "qualname": "update_dist", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span>,</span><span class=\"param\">\t<span class=\"n\">weight_dist</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">prior_weight_dist</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">get_layers_func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">],</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">function</span> <span class=\"n\">get_torch_layers</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "core.objective", "modulename": "core.objective", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.objective.AbstractObjective", "modulename": "core.objective.AbstractObjective", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.objective.AbstractObjective.AbstractObjective", "modulename": "core.objective.AbstractObjective", "qualname": "AbstractObjective", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC"}, {"fullname": "core.objective.AbstractObjective.AbstractObjective.calculate", "modulename": "core.objective.AbstractObjective", "qualname": "AbstractObjective.calculate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">loss</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">kl</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">num_samples</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.objective.BBBObjective", "modulename": "core.objective.BBBObjective", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.objective.BBBObjective.BBBObjective", "modulename": "core.objective.BBBObjective", "qualname": "BBBObjective", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "core.objective.AbstractObjective.AbstractObjective"}, {"fullname": "core.objective.BBBObjective.BBBObjective.__init__", "modulename": "core.objective.BBBObjective", "qualname": "BBBObjective.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">kl_penalty</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "core.objective.BBBObjective.BBBObjective.calculate", "modulename": "core.objective.BBBObjective", "qualname": "BBBObjective.calculate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">loss</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">kl</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">num_samples</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.objective.FClassicObjective", "modulename": "core.objective.FClassicObjective", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.objective.FClassicObjective.FClassicObjective", "modulename": "core.objective.FClassicObjective", "qualname": "FClassicObjective", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "core.objective.AbstractObjective.AbstractObjective"}, {"fullname": "core.objective.FClassicObjective.FClassicObjective.__init__", "modulename": "core.objective.FClassicObjective", "qualname": "FClassicObjective.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">kl_penalty</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">delta</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "core.objective.FClassicObjective.FClassicObjective.calculate", "modulename": "core.objective.FClassicObjective", "qualname": "FClassicObjective.calculate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">loss</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">kl</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">num_samples</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.objective.FQuadObjective", "modulename": "core.objective.FQuadObjective", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.objective.FQuadObjective.FQuadObjective", "modulename": "core.objective.FQuadObjective", "qualname": "FQuadObjective", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "core.objective.AbstractObjective.AbstractObjective"}, {"fullname": "core.objective.FQuadObjective.FQuadObjective.__init__", "modulename": "core.objective.FQuadObjective", "qualname": "FQuadObjective.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">kl_penalty</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">delta</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "core.objective.FQuadObjective.FQuadObjective.calculate", "modulename": "core.objective.FQuadObjective", "qualname": "FQuadObjective.calculate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">loss</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">kl</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">num_samples</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.objective.McAllisterObjective", "modulename": "core.objective.McAllisterObjective", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.objective.McAllisterObjective.McAllisterObjective", "modulename": "core.objective.McAllisterObjective", "qualname": "McAllisterObjective", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "core.objective.AbstractObjective.AbstractObjective"}, {"fullname": "core.objective.McAllisterObjective.McAllisterObjective.__init__", "modulename": "core.objective.McAllisterObjective", "qualname": "McAllisterObjective.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">kl_penalty</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">delta</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "core.objective.McAllisterObjective.McAllisterObjective.calculate", "modulename": "core.objective.McAllisterObjective", "qualname": "McAllisterObjective.calculate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">loss</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">kl</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">num_samples</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.objective.TolstikhinObjective", "modulename": "core.objective.TolstikhinObjective", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.objective.TolstikhinObjective.TolstikhinObjective", "modulename": "core.objective.TolstikhinObjective", "qualname": "TolstikhinObjective", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "core.objective.AbstractObjective.AbstractObjective"}, {"fullname": "core.objective.TolstikhinObjective.TolstikhinObjective.__init__", "modulename": "core.objective.TolstikhinObjective", "qualname": "TolstikhinObjective.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">kl_penalty</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">delta</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "core.objective.TolstikhinObjective.TolstikhinObjective.calculate", "modulename": "core.objective.TolstikhinObjective", "qualname": "TolstikhinObjective.calculate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">loss</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">kl</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">num_samples</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.risk", "modulename": "core.risk", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.risk.certify_risk", "modulename": "core.risk", "qualname": "certify_risk", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span>,</span><span class=\"param\">\t<span class=\"n\">bounds</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">bound</span><span class=\"o\">.</span><span class=\"n\">AbstractBound</span><span class=\"o\">.</span><span class=\"n\">AbstractBound</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">losses</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">posterior</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">prior</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">bound_loader</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">dataloader</span><span class=\"o\">.</span><span class=\"n\">DataLoader</span>,</span><span class=\"param\">\t<span class=\"n\">num_samples_loss</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">device</span>,</span><span class=\"param\">\t<span class=\"n\">pmin</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1e-05</span>,</span><span class=\"param\">\t<span class=\"n\">wandb_params</span><span class=\"p\">:</span> <span class=\"n\">Dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span><span class=\"p\">]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.split_strategy", "modulename": "core.split_strategy", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.split_strategy.AbstractSplitStrategy", "modulename": "core.split_strategy.AbstractSplitStrategy", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.split_strategy.AbstractSplitStrategy.AbstractSplitStrategy", "modulename": "core.split_strategy.AbstractSplitStrategy", "qualname": "AbstractSplitStrategy", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC"}, {"fullname": "core.split_strategy.AbstractSplitStrategy.AbstractSplitStrategy.split", "modulename": "core.split_strategy.AbstractSplitStrategy", "qualname": "AbstractSplitStrategy.split", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_loader</span><span class=\"p\">:</span> <span class=\"n\">scripts</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">AbstractLoader</span><span class=\"o\">.</span><span class=\"n\">AbstractLoader</span>,</span><span class=\"param\">\t<span class=\"n\">split_config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.split_strategy.FaultySplitStrategy", "modulename": "core.split_strategy.FaultySplitStrategy", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.split_strategy.FaultySplitStrategy.FaultySplitStrategy", "modulename": "core.split_strategy.FaultySplitStrategy", "qualname": "FaultySplitStrategy", "kind": "class", "doc": "<p></p>\n", "bases": "core.split_strategy.PBPSplitStrategy.PBPSplitStrategy"}, {"fullname": "core.split_strategy.FaultySplitStrategy.FaultySplitStrategy.__init__", "modulename": "core.split_strategy.FaultySplitStrategy", "qualname": "FaultySplitStrategy.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prior_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">train_percent</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">val_percent</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">prior_percent</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">self_certified</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span>)</span>"}, {"fullname": "core.split_strategy.FaultySplitStrategy.FaultySplitStrategy.posterior_loader", "modulename": "core.split_strategy.FaultySplitStrategy", "qualname": "FaultySplitStrategy.posterior_loader", "kind": "variable", "doc": "<p></p>\n", "annotation": ": torch.utils.data.dataloader.DataLoader", "default_value": "None"}, {"fullname": "core.split_strategy.FaultySplitStrategy.FaultySplitStrategy.prior_loader", "modulename": "core.split_strategy.FaultySplitStrategy", "qualname": "FaultySplitStrategy.prior_loader", "kind": "variable", "doc": "<p></p>\n", "annotation": ": torch.utils.data.dataloader.DataLoader", "default_value": "None"}, {"fullname": "core.split_strategy.FaultySplitStrategy.FaultySplitStrategy.val_loader", "modulename": "core.split_strategy.FaultySplitStrategy", "qualname": "FaultySplitStrategy.val_loader", "kind": "variable", "doc": "<p></p>\n", "annotation": ": torch.utils.data.dataloader.DataLoader", "default_value": "None"}, {"fullname": "core.split_strategy.FaultySplitStrategy.FaultySplitStrategy.test_loader", "modulename": "core.split_strategy.FaultySplitStrategy", "qualname": "FaultySplitStrategy.test_loader", "kind": "variable", "doc": "<p></p>\n", "annotation": ": torch.utils.data.dataloader.DataLoader", "default_value": "None"}, {"fullname": "core.split_strategy.FaultySplitStrategy.FaultySplitStrategy.test_1batch", "modulename": "core.split_strategy.FaultySplitStrategy", "qualname": "FaultySplitStrategy.test_1batch", "kind": "variable", "doc": "<p></p>\n", "annotation": ": torch.utils.data.dataloader.DataLoader", "default_value": "None"}, {"fullname": "core.split_strategy.FaultySplitStrategy.FaultySplitStrategy.bound_loader", "modulename": "core.split_strategy.FaultySplitStrategy", "qualname": "FaultySplitStrategy.bound_loader", "kind": "variable", "doc": "<p></p>\n", "annotation": ": torch.utils.data.dataloader.DataLoader", "default_value": "None"}, {"fullname": "core.split_strategy.FaultySplitStrategy.FaultySplitStrategy.bound_loader_1batch", "modulename": "core.split_strategy.FaultySplitStrategy", "qualname": "FaultySplitStrategy.bound_loader_1batch", "kind": "variable", "doc": "<p></p>\n", "annotation": ": torch.utils.data.dataloader.DataLoader", "default_value": "None"}, {"fullname": "core.split_strategy.PBPSplitStrategy", "modulename": "core.split_strategy.PBPSplitStrategy", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.split_strategy.PBPSplitStrategy.PBPSplitStrategy", "modulename": "core.split_strategy.PBPSplitStrategy", "qualname": "PBPSplitStrategy", "kind": "class", "doc": "<p></p>\n", "bases": "core.split_strategy.AbstractSplitStrategy.AbstractSplitStrategy"}, {"fullname": "core.split_strategy.PBPSplitStrategy.PBPSplitStrategy.__init__", "modulename": "core.split_strategy.PBPSplitStrategy", "qualname": "PBPSplitStrategy.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prior_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">train_percent</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">val_percent</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">prior_percent</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">self_certified</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span>)</span>"}, {"fullname": "core.split_strategy.PBPSplitStrategy.PBPSplitStrategy.posterior_loader", "modulename": "core.split_strategy.PBPSplitStrategy", "qualname": "PBPSplitStrategy.posterior_loader", "kind": "variable", "doc": "<p></p>\n", "annotation": ": torch.utils.data.dataloader.DataLoader", "default_value": "None"}, {"fullname": "core.split_strategy.PBPSplitStrategy.PBPSplitStrategy.prior_loader", "modulename": "core.split_strategy.PBPSplitStrategy", "qualname": "PBPSplitStrategy.prior_loader", "kind": "variable", "doc": "<p></p>\n", "annotation": ": torch.utils.data.dataloader.DataLoader", "default_value": "None"}, {"fullname": "core.split_strategy.PBPSplitStrategy.PBPSplitStrategy.val_loader", "modulename": "core.split_strategy.PBPSplitStrategy", "qualname": "PBPSplitStrategy.val_loader", "kind": "variable", "doc": "<p></p>\n", "annotation": ": torch.utils.data.dataloader.DataLoader", "default_value": "None"}, {"fullname": "core.split_strategy.PBPSplitStrategy.PBPSplitStrategy.test_loader", "modulename": "core.split_strategy.PBPSplitStrategy", "qualname": "PBPSplitStrategy.test_loader", "kind": "variable", "doc": "<p></p>\n", "annotation": ": torch.utils.data.dataloader.DataLoader", "default_value": "None"}, {"fullname": "core.split_strategy.PBPSplitStrategy.PBPSplitStrategy.test_1batch", "modulename": "core.split_strategy.PBPSplitStrategy", "qualname": "PBPSplitStrategy.test_1batch", "kind": "variable", "doc": "<p></p>\n", "annotation": ": torch.utils.data.dataloader.DataLoader", "default_value": "None"}, {"fullname": "core.split_strategy.PBPSplitStrategy.PBPSplitStrategy.bound_loader", "modulename": "core.split_strategy.PBPSplitStrategy", "qualname": "PBPSplitStrategy.bound_loader", "kind": "variable", "doc": "<p></p>\n", "annotation": ": torch.utils.data.dataloader.DataLoader", "default_value": "None"}, {"fullname": "core.split_strategy.PBPSplitStrategy.PBPSplitStrategy.bound_loader_1batch", "modulename": "core.split_strategy.PBPSplitStrategy", "qualname": "PBPSplitStrategy.bound_loader_1batch", "kind": "variable", "doc": "<p></p>\n", "annotation": ": torch.utils.data.dataloader.DataLoader", "default_value": "None"}, {"fullname": "core.split_strategy.PBPSplitStrategy.PBPSplitStrategy.split", "modulename": "core.split_strategy.PBPSplitStrategy", "qualname": "PBPSplitStrategy.split", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dataset_loader</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">scripts</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">MNISTLoader</span><span class=\"o\">.</span><span class=\"n\">MNISTLoader</span><span class=\"p\">,</span> <span class=\"n\">scripts</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">CIFAR10Loader</span><span class=\"o\">.</span><span class=\"n\">CIFAR10Loader</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">split_config</span><span class=\"p\">:</span> <span class=\"n\">Dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.training", "modulename": "core.training", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.training.train", "modulename": "core.training", "qualname": "train", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"o\">.</span><span class=\"n\">Module</span>,</span><span class=\"param\">\t<span class=\"n\">posterior</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">prior</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">distribution</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"o\">.</span><span class=\"n\">AbstractVariable</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">objective</span><span class=\"p\">:</span> <span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">objective</span><span class=\"o\">.</span><span class=\"n\">AbstractObjective</span><span class=\"o\">.</span><span class=\"n\">AbstractObjective</span>,</span><span class=\"param\">\t<span class=\"n\">train_loader</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">dataloader</span><span class=\"o\">.</span><span class=\"n\">DataLoader</span>,</span><span class=\"param\">\t<span class=\"n\">val_loader</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">utils</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">dataloader</span><span class=\"o\">.</span><span class=\"n\">DataLoader</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">device</span>,</span><span class=\"param\">\t<span class=\"n\">wandb_params</span><span class=\"p\">:</span> <span class=\"n\">Dict</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "core.utils", "modulename": "core.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.utils.kl", "modulename": "core.utils.kl", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "core.utils.kl.KLDivergenceInterface", "modulename": "core.utils.kl", "qualname": "KLDivergenceInterface", "kind": "class", "doc": "<p>An abstract base class for computing Kullback-Leibler Divergence (KL Divergence).</p>\n", "bases": "abc.ABC"}, {"fullname": "core.utils.kl.KLDivergenceInterface.compute_kl", "modulename": "core.utils.kl", "qualname": "KLDivergenceInterface.compute_kl", "kind": "function", "doc": "<p>Computes the Kullback-Leibler Divergence (KL Divergence) between two probability distributions.</p>\n\n<p>Args:\n    <em>args: Variable length argument list.\n    *</em>kwargs: Arbitrary keyword arguments.</p>\n\n<p>Returns:\n    torch.Tensor: The computed KL Divergence.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, {"fullname": "core.utils.kl.inv_kl", "modulename": "core.utils.kl", "qualname": "inv_kl", "kind": "function", "doc": "<p>Inversion of the binary KL divergence from (Not) Bounding the True Error by John Langford and Rich Caruana.</p>\n\n<p>Parameters:\n    qs (float): Empirical risk.\n    ks (float): Second term for the binary KL divergence inversion.</p>\n\n<p>Returns:\n    float: The computed inversion of the binary KL divergence.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">qs</span>, </span><span class=\"param\"><span class=\"n\">ks</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();